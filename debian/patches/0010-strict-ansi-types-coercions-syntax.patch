Description: General types, syntax cleanup and adding explicit coercions
 This patch cleans up all remaining syntax and type warnings so that on
 GCC v4.8.2 or later "-Wall -Wextra -pedantic-errors -ansi" CFLAGS yield no
 warnings (except for ansi-comments which is dealt with in a separate patch for
 clarity). Some of these may be considered non-essential but this patch is
 included as-is until upstream indicates which they wish to keep (or all?) in
 future versions. Interesting to note is that although strict ansi-compliance
 is more than many care for, while doing exactly that a memory leak and several
 functional faults were consequently discovered, validating the effort...
Forwarded: yes
Author: Rowan Thorpe <rowan@rowanthorpe.com>
Last-Update: 2014-03-03
--- a/src/sflowtool.c
+++ b/src/sflowtool.c
@@ -11,6 +11,7 @@
 #include "config.h"
 #endif
 
+#include <stdint.h>
 #include <stdio.h>
 #include <stdarg.h>
 #include <stdlib.h>
@@ -259,7 +260,7 @@
   uint32_t packet_data_tag;
   uint32_t headerProtocol;
   uint8_t *header;
-  int headerLen;
+  unsigned int headerLen;
   uint32_t stripped;
 
   /* header decode */
@@ -554,7 +555,7 @@
   register char c, *r = in, *w = out;
   int maxlen = (strlen(in) * 3) + 1;
   if(outlen < maxlen) return "URLEncode: not enough space";
-  while (c = *r++) {
+  while ((c = *r++)) {
     if(isalnum(c)) *w++ = c;
     else if(isspace(c)) *w++ = '+';
     else {
@@ -852,7 +853,7 @@
 
   if(type_len == 0x0800) {
     /* IPV4 */
-    if((end - ptr) < sizeof(struct myiphdr)) return;
+    if((uint8_t)(end - ptr) < sizeof(struct myiphdr)) return;
     /* look at first byte of header.... */
     /*  ___________________________ */
     /* |   version   |    hdrlen   | */
@@ -885,32 +886,63 @@
 
 static void decode80211MAC(SFSample *sample)
 {
-  uint8_t *start = (uint8_t *)sample->header;
-  uint8_t *end = start + sample->headerLen;
-  uint8_t *ptr = start;
+  uint8_t *start;
+  uint8_t *end;
+  uint8_t *ptr;
+  uint32_t fc;
+  uint32_t protocolVersion;
+  uint32_t control;
+  uint32_t subType;
+  uint32_t toDS;
+  uint32_t fromDS;
+  uint32_t moreFrag;
+  uint32_t retry;
+  uint32_t pwrMgt;
+  uint32_t moreData;
+  uint32_t encrypted;
+  uint32_t order;
+  uint32_t duration_id;
+  uint32_t sequence;
+  uint8_t *macAddr1;
+  uint8_t *macAddr2;
+  uint8_t *macAddr3;
+  uint8_t *rxMAC;
+  uint8_t *txMAC;
+  uint8_t *srcMAC;
+  uint8_t *dstMAC;
+
+  /* Just to silence "set but unused" warnings in a portable way (feel free to comment out after debugging). */
+  (void)start; (void)end; (void)ptr; (void)fc; (void)protocolVersion; (void)control; (void)subType;
+  (void)toDS; (void)fromDS; (void)moreFrag; (void)retry; (void)pwrMgt; (void)moreData;
+  (void)encrypted; (void)order; (void)duration_id; (void)sequence;
+  (void)macAddr1; (void)macAddr2; (void)macAddr3; (void)rxMAC; (void)txMAC; (void)srcMAC; (void)dstMAC;
 
   /* assume not found */
   sample->gotIPV4 = NO;
   sample->gotIPV6 = NO;
 
-  if(sample->headerLen < WIFI_MIN_HDR_SIZ) return; /* not enough for an 80211 MAC header */
+  if(sample->headerLen >= WIFI_MIN_HDR_SIZ) { /* enough for an 80211 MAC header */
 
-  uint32_t fc = (ptr[1] << 8) + ptr[0];  /* [b7..b0][b15..b8] */
-  uint32_t protocolVersion = fc & 3;
-  uint32_t control = (fc >> 2) & 3;
-  uint32_t subType = (fc >> 4) & 15;
-  uint32_t toDS = (fc >> 8) & 1;
-  uint32_t fromDS = (fc >> 9) & 1;
-  uint32_t moreFrag = (fc >> 10) & 1;
-  uint32_t retry = (fc >> 11) & 1;
-  uint32_t pwrMgt = (fc >> 12) & 1;
-  uint32_t moreData = (fc >> 13) & 1;
-  uint32_t encrypted = (fc >> 14) & 1;
-  uint32_t order = fc >> 15;
+  start = (uint8_t *)sample->header;
+  end = start + sample->headerLen;
+  ptr = start;
+
+  fc = (ptr[1] << 8) + ptr[0];  /* [b7..b0][b15..b8] */
+  protocolVersion = fc & 3;
+  control = (fc >> 2) & 3;
+  subType = (fc >> 4) & 15;
+  toDS = (fc >> 8) & 1;
+  fromDS = (fc >> 9) & 1;
+  moreFrag = (fc >> 10) & 1;
+  retry = (fc >> 11) & 1;
+  pwrMgt = (fc >> 12) & 1;
+  moreData = (fc >> 13) & 1;
+  encrypted = (fc >> 14) & 1;
+  order = fc >> 15;
 
   ptr += 2;
 
-  uint32_t duration_id = (ptr[1] << 8) + ptr[0]; /* not in network byte order either? */
+  duration_id = (ptr[1] << 8) + ptr[0]; /* not in network byte order either? */
   ptr += 2;
 
   switch(control) {
@@ -922,13 +954,13 @@
   case 2: /* data */
     {
       
-      uint8_t *macAddr1 = ptr;
+      macAddr1 = ptr;
       ptr += 6;
-      uint8_t *macAddr2 = ptr;
+      macAddr2 = ptr;
       ptr += 6;
-      uint8_t *macAddr3 = ptr;
+      macAddr3 = ptr;
       ptr += 6;
-      uint32_t sequence = (ptr[0] << 8) + ptr[1];
+      sequence = (ptr[0] << 8) + ptr[1];
       ptr += 2;
 
       /* ToDS   FromDS   Addr1   Addr2  Addr3   Addr4
@@ -937,10 +969,10 @@
          1      0        BSSID   SA     DA      N/A
          1      1        RA      TA     DA      SA  (wireless bridge) */
 
-      uint8_t *rxMAC = macAddr1;
-      uint8_t *txMAC = macAddr2;
-      uint8_t *srcMAC = NULL;
-      uint8_t *dstMAC = NULL;
+      rxMAC = macAddr1;
+      txMAC = macAddr2;
+      srcMAC = NULL;
+      dstMAC = NULL;
 
       if(toDS) {
 	dstMAC = macAddr3;
@@ -968,6 +1000,7 @@
       if(rxMAC) sf_log(sample,"rxMAC %02x%02x%02x%02x%02x%02x\n", rxMAC[0], rxMAC[1], rxMAC[2], rxMAC[3], rxMAC[4], rxMAC[5]);
     }
   }
+  }
 }
 
 /*_________________---------------------------__________________
@@ -1412,7 +1445,7 @@
 {
 
 #ifdef SPOOFSOURCE
-  if(sfConfig.spoofSource) return openNetFlowSocket_spoof();
+  if(sfConfig.spoofSource) { openNetFlowSocket_spoof(); return; }
 #endif
 
   {
@@ -2365,6 +2398,9 @@
   uint64_t req_bytes;
   uint64_t resp_bytes;
 
+  /* Just to silence "set but unused" warnings in a portable way (feel free to comment out after debugging). */
+  (void)req_bytes;
+
   sf_log(sample,"flowSampleType http\n");
   method = sf_log_next32(sample, "http_method");
   protocol = sf_log_next32(sample, "http_protocol");
@@ -3795,7 +3831,7 @@
     SFForwardingTarget *tgt = sfConfig.forwardingTargets;
     for( ; tgt != NULL; tgt = tgt->nxt) {
       int bytesSent;
-      if((bytesSent = sendto(tgt->sock,
+      if((bytesSent = (uint8_t)sendto(tgt->sock,
 			     (const char *)sample->rawSample,
 			     sample->rawSampleLen,
 			     0,
@@ -3835,6 +3871,9 @@
 {
   int soc;
   struct sockaddr_in myaddr_in;
+#ifndef WIN32
+  int save_fd;
+#endif /* WIN32 */
 
   /* Create socket */
   memset((char *)&myaddr_in, 0, sizeof(struct sockaddr_in));
@@ -3849,7 +3888,7 @@
 
 #ifndef WIN32
   /* make socket non-blocking */
-  int save_fd = fcntl(soc, F_GETFL);
+  save_fd = fcntl(soc, F_GETFL);
   save_fd |= O_NONBLOCK;
   fcntl(soc, F_SETFL, save_fd);
 #endif /* WIN32 */
@@ -3871,6 +3910,9 @@
 {
   int soc;
   struct sockaddr_in6 myaddr_in6;
+#ifndef WIN32
+  int save_fd;
+#endif /* WIN32 */
 
   /* Create socket */
   memset((char *)&myaddr_in6, 0, sizeof(struct sockaddr_in6));
@@ -3885,7 +3927,7 @@
 
 #ifndef WIN32
   /* make socket non-blocking */
-  int save_fd = fcntl(soc, F_GETFL);
+  save_fd = fcntl(soc, F_GETFL);
   save_fd |= O_NONBLOCK;
   fcntl(soc, F_SETFL, save_fd);
 #endif /* WIN32 */
@@ -3922,7 +3964,9 @@
 static void readPacket(int soc)
 {
   struct sockaddr_in6 peer;
-  int alen, cc;
+  unsigned int alen;
+  int cc;
+  SFSample sample;
 #define MAX_PKT_SIZ 65536
   char buf[MAX_PKT_SIZ];
   alen = sizeof(peer);
@@ -3932,10 +3976,9 @@
     fprintf(ERROUT, "recvfrom() failed, %s\n", strerror(errno));
     return;
   }
-  SFSample sample;
   memset(&sample, 0, sizeof(sample));
   sample.rawSample = (uint8_t *)buf;
-  sample.rawSampleLen = cc;
+  sample.rawSampleLen = (uint8_t)cc;
   if(alen == sizeof(struct sockaddr_in)) {
     struct sockaddr_in *peer4 = (struct sockaddr_in *)&peer;
     sample.sourceIP.type = SFLADDRESSTYPE_IP_V4;
@@ -4012,7 +4055,7 @@
   }
 
   /* now we're just looking for IP */
-  if(end - ptr < NFT_MIN_SIZ) return -1; /* not enough for an IPv4 header */
+  if((uint8_t)(end - ptr) < NFT_MIN_SIZ) return -1; /* not enough for an IPv4 header */
   
   /* peek for IPX */
   if(type_len == 0x0200 || type_len == 0x0201 || type_len == 0x0600) {
@@ -4062,7 +4105,7 @@
 
   if(type_len == 0x0800) {
     /* IPV4 */
-    if((end - ptr) < sizeof(struct myiphdr)) return -1;
+    if((uint8_t)(end - ptr) < sizeof(struct myiphdr)) return -1;
     /* look at first byte of header.... */
     /*  ___________________________ */
     /* |   version   |    hdrlen   | */
@@ -4311,7 +4354,8 @@
 
 static void process_command_line(int argc, char *argv[])
 {
-  int arg = 1, in = 0;
+  char in;
+  int arg = 1;
   int i;
   int plus,minus;
   size_t len_str;
@@ -4332,7 +4376,7 @@
     plus = (argv[arg][0] == '+');
     minus = (argv[arg][0] == '-');
     if(plus == NO && minus == NO) { instructions(*argv); exit(1); }
-    in = argv[arg++][1];
+    in = (char)argv[arg++][1];
     /* check first that options with/without arguments are correct */
     switch(in) {
     case 't':
--- a/src/sflow.h
+++ b/src/sflow.h
@@ -14,12 +14,13 @@
 extern "C" {
 #endif
 
+#include <stdint.h>
 typedef struct {
     uint32_t addr;
 } SFLIPv4;
 
 typedef struct {
-    u_char addr[16];
+    uint8_t addr[16];
 } SFLIPv6;
 
 typedef union _SFLAddress_value {
@@ -323,7 +324,7 @@
   IEEE80211_A=1,
   IEEE80211_B=2,
   IEEE80211_G=3,
-  IEEE80211_N=4,
+  IEEE80211_N=4
 } SFL_IEEE80211_version;
 
 /* opaque = flow_data; enterprise = 0; format = 1014 */
@@ -414,7 +415,7 @@
 typedef enum  {
   MEMCACHE_PROT_OTHER   = 0,
   MEMCACHE_PROT_ASCII   = 1,
-  MEMCACHE_PROT_BINARY  = 2,
+  MEMCACHE_PROT_BINARY  = 2
 } SFLMemcache_prot;
 
 typedef enum  {
@@ -434,7 +435,7 @@
   MEMCACHE_CMD_FLUSH    = 13,
   MEMCACHE_CMD_VERSION  = 14,
   MEMCACHE_CMD_QUIT     = 15,
-  MEMCACHE_CMD_TOUCH    = 16,
+  MEMCACHE_CMD_TOUCH    = 16
 } SFLMemcache_cmd;
 
 enum SFLMemcache_operation_status {
@@ -447,7 +448,7 @@
   MEMCACHE_OP_NOT_STORED   = 6,
   MEMCACHE_OP_EXISTS       = 7,
   MEMCACHE_OP_NOT_FOUND    = 8,
-  MEMCACHE_OP_DELETED      = 9,
+  MEMCACHE_OP_DELETED      = 9
 };
 
 #define SFL_MAX_MEMCACHE_KEY 255
@@ -471,7 +472,7 @@
   SFHTTP_PUT      = 5,
   SFHTTP_DELETE   = 6,
   SFHTTP_TRACE    = 7,
-  SFHTTP_CONNECT  = 8,
+  SFHTTP_CONNECT  = 8
 } SFLHTTP_method;
 
 #define SFL_MAX_HTTP_URI 255
@@ -510,7 +511,7 @@
   SFLAPP_NOT_IMPLEMENTED = 7,
   SFLAPP_NOT_FOUND       = 8,
   SFLAPP_UNAVAILABLE     = 9,
-  SFLAPP_UNAUTHORIZED    = 10,
+  SFLAPP_UNAUTHORIZED    = 10
 } EnumSFLAPPStatus;
 
   static const char *SFL_APP_STATUS_names[] = { "SUCCESS",
@@ -606,7 +607,7 @@
   SFLFLOW_APP_CTXT         = 2203, /* enclosing server context */
   SFLFLOW_APP_ACTOR_INIT   = 2204, /* initiator */
   SFLFLOW_APP_ACTOR_TGT    = 2205, /* target */
-  SFLFLOW_HTTP2            = 2206,
+  SFLFLOW_HTTP2            = 2206
 };
 
 typedef union _SFLFlow_type {
@@ -922,7 +923,7 @@
 
 typedef struct _SFLHostId {
   SFLString hostname;
-  u_char uuid[16];
+  uint8_t uuid[16];
   uint32_t machine_type; /* enum SFLMachine_type */
   uint32_t os_name;      /* enum SFLOS_name */
   SFLString os_release;  /* max len 32 bytes */
@@ -1311,7 +1312,7 @@
   SFLCOUNTERS_MEMCACHE2     = 2204, /* memcached */
   SFLCOUNTERS_VDI           = 2205,
   SFLCOUNTERS_APP_WORKERS   = 2206,
-  SFLCOUNTERS_HOST_GPU_NVML = (5703 << 12) + 1, /* = 23359489 */
+  SFLCOUNTERS_HOST_GPU_NVML = (5703 << 12) + 1 /* = 23359489 */
 };
 
 typedef union _SFLCounters_type {
