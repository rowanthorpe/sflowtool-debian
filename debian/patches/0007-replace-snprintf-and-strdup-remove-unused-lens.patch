Description: Remove snprintf, strdup, and remove unused length attributes
 Throughout the file sprintf has been used, with comments explaining snprintf
 wasn't used for portability reasons. In one case this has been missed so this
 patch fixes it for consistency with the other cases. Also, it replaces the
 strdup with equivalent use of malloc/memcpy for the same portability reasons
 (incidentally another patch created along with this one found a memory leak
 caused by the misleading nature of strdup). Length attributes which are passed
 to many functions (obviously originally intended for use by snprintf) are
 removed to silence warnings about their redundant existence.
Forwarded: yes
Author: Rowan Thorpe <rowan@rowanthorpe.com>
Last-Update: 2014-03-03
--- a/src/sflowtool.c
+++ b/src/sflowtool.c
@@ -509,11 +509,12 @@
 char *IP_to_a(uint32_t ipaddr, char *buf)
 {
   u_char *ip = (u_char *)&ipaddr;
+  // should really be: snprintf(buf, buflen,...) but snprintf() is not always available
   sprintf(buf, "%u.%u.%u.%u", ip[0], ip[1], ip[2], ip[3]);
   return buf;
 }
 
-static char *printAddress(SFLAddress *address, char *buf, int bufLen) {
+static char *printAddress(SFLAddress *address, char *buf) {
   if(address->type == SFLADDRESSTYPE_IP_V4)
     IP_to_a(address->address.ip_v4.addr, buf);
   else {
@@ -551,7 +552,7 @@
   char agentIP[51], srcIP[51], dstIP[51];
   // source
   if(printf("FLOW,%s,%d,%d,",
-	    printAddress(&sample->agent_addr, agentIP, 50),
+	    printAddress(&sample->agent_addr, agentIP),
 	    sample->inputPort,
 	    sample->outputPort) < 0) {
     exit(-41);
@@ -577,8 +578,8 @@
   }
   // layer 3/4
   if(printf(",%s,%s,%d,0x%02x,%d,%d,%d,0x%02x",
-	    printAddress(&sample->ipsrc, srcIP, 50),
-	    printAddress(&sample->ipdst, dstIP, 50),
+	    printAddress(&sample->ipsrc, srcIP),
+	    printAddress(&sample->ipdst, dstIP),
 	    sample->dcd_ipProtocol,
 	    sample->dcd_ipTos,
 	    sample->dcd_ipTTL,
@@ -605,7 +606,7 @@
 {
   // source
   char agentIP[51];
-  if(printf("CNTR,%s,", printAddress(&sample->agent_addr, agentIP, 50)) < 0) {
+  if(printf("CNTR,%s,", printAddress(&sample->agent_addr, agentIP)) < 0) {
     exit(-45);
   }
   if(printf("%u,%u,%"PRIu64",%u,%u,%"PRIu64",%u,%u,%u,%u,%u,%u,%"PRIu64",%u,%u,%u,%u,%u,%u\n",
@@ -662,7 +663,7 @@
   }
   fprintf(ERROUT, "%s (source IP = %s) %s\n",
 	  msg,
-	  printAddress(&sample->sourceIP, ipbuf, 50),
+	  printAddress(&sample->sourceIP, ipbuf),
 	  hex);
 
   SFABORT(sample, SF_ABORT_DECODE_ERROR);
@@ -988,8 +989,8 @@
     sample->dcd_ipTTL = ip.ttl;
     sf_log("ip.tot_len %d\n", ntohs(ip.tot_len));
     /* Log out the decoded IP fields */
-    sf_log("srcIP %s\n", printAddress(&sample->ipsrc, buf, 50));
-    sf_log("dstIP %s\n", printAddress(&sample->ipdst, buf, 50));
+    sf_log("srcIP %s\n", printAddress(&sample->ipsrc, buf));
+    sf_log("dstIP %s\n", printAddress(&sample->ipdst, buf));
     sf_log("IPProtocol %u\n", sample->dcd_ipProtocol);
     sf_log("IPTOS %u\n", sample->dcd_ipTos);
     sf_log("IPTTL %u\n", sample->dcd_ipTTL);
@@ -1060,11 +1061,11 @@
       sample->ipsrc.type = SFLADDRESSTYPE_IP_V6;
       memcpy(&sample->ipsrc.address, ptr, 16);
       ptr +=16;
-      sf_log("srcIP6 %s\n", printAddress(&sample->ipsrc, buf, 100));
+      sf_log("srcIP6 %s\n", printAddress(&sample->ipsrc, buf));
       sample->ipdst.type = SFLADDRESSTYPE_IP_V6;
       memcpy(&sample->ipdst.address, ptr, 16);
       ptr +=16;
-      sf_log("dstIP6 %s\n", printAddress(&sample->ipdst, buf, 100));
+      sf_log("dstIP6 %s\n", printAddress(&sample->ipdst, buf));
     }
 
     // skip over some common header extensions...
@@ -1548,7 +1549,7 @@
   return address->type;
 }
 
-static char *printTag(uint32_t tag, char *buf, int bufLen) {
+static char *printTag(uint32_t tag, char *buf) {
   // should really be: snprintf(buf, buflen,...) but snprintf() is not always available
   sprintf(buf, "%u:%u", (tag >> 12), (tag & 0x00000FFF));
   return buf;
@@ -1556,7 +1557,7 @@
 
 static void skipTLVRecord(SFSample *sample, uint32_t tag, uint32_t len, char *description) {
   char buf[51];
-  sf_log("skipping unknown %s: %s len=%d\n", description, printTag(tag, buf, 50), len);
+  sf_log("skipping unknown %s: %s len=%d\n", description, printTag(tag, buf), len);
   skipBytes(sample, len);
 }
 
@@ -1596,7 +1597,7 @@
 
   sample->extended_data_tag |= SASAMPLE_EXTENDED_DATA_ROUTER;
 
-  sf_log("nextHop %s\n", printAddress(&sample->nextHop, buf, 50));
+  sf_log("nextHop %s\n", printAddress(&sample->nextHop, buf));
   sf_log("srcSubnetMask %u\n", sample->srcMask);
   sf_log("dstSubnetMask %u\n", sample->dstMask);
 }
@@ -1664,7 +1665,7 @@
 
   if(sample->datagramVersion >= 5) {
     getAddress(sample, &sample->bgp_nextHop);
-    sf_log("bgp_nexthop %s\n", printAddress(&sample->bgp_nextHop, buf, 50));
+    sf_log("bgp_nexthop %s\n", printAddress(&sample->bgp_nextHop, buf));
   }
 
   sample->my_as = getData32(sample);
@@ -1820,7 +1821,7 @@
   char buf[51];
   sf_log("extendedType MPLS\n");
   getAddress(sample, &sample->mpls_nextHop);
-  sf_log("mpls_nexthop %s\n", printAddress(&sample->mpls_nextHop, buf, 50));
+  sf_log("mpls_nexthop %s\n", printAddress(&sample->mpls_nextHop, buf));
 
   mplsLabelStack(sample, "mpls_input_stack");
   mplsLabelStack(sample, "mpls_output_stack");
@@ -1838,9 +1839,9 @@
   char buf[51];
   sf_log("extendedType NAT\n");
   getAddress(sample, &sample->nat_src);
-  sf_log("nat_src %s\n", printAddress(&sample->nat_src, buf, 50));
+  sf_log("nat_src %s\n", printAddress(&sample->nat_src, buf));
   getAddress(sample, &sample->nat_dst);
-  sf_log("nat_dst %s\n", printAddress(&sample->nat_dst, buf, 50));
+  sf_log("nat_dst %s\n", printAddress(&sample->nat_dst, buf));
   sample->extended_data_tag |= SASAMPLE_EXTENDED_DATA_NAT;
 }
 
@@ -2165,8 +2166,8 @@
     sample->ipdst.address.ip_v4 = nfKey.dst_ip;
     sample->dcd_ipProtocol = ntohl(nfKey.protocol);
     sample->dcd_ipTos = ntohl(nfKey.tos);
-    sf_log("%ssrcIP %s\n", prefix, printAddress(&sample->ipsrc, buf, 50));
-    sf_log("%sdstIP %s\n", prefix, printAddress(&sample->ipdst, buf, 50));
+    sf_log("%ssrcIP %s\n", prefix, printAddress(&sample->ipsrc, buf));
+    sf_log("%sdstIP %s\n", prefix, printAddress(&sample->ipdst, buf));
     sf_log("%sIPProtocol %u\n", prefix, sample->dcd_ipProtocol);
     sf_log("%sIPTOS %u\n", prefix, sample->dcd_ipTos);
     sample->dcd_sport = ntohl(nfKey.src_port);
@@ -2220,8 +2221,8 @@
     sample->ipdst.type = SFLADDRESSTYPE_IP_V6;
     memcpy(&sample->ipdst.address.ip_v6, &nfKey6.dst_ip, 16);
     sample->dcd_ipProtocol = ntohl(nfKey6.protocol);
-    sf_log("%ssrcIP6 %s\n", prefix, printAddress(&sample->ipsrc, buf, 50));
-    sf_log("%sdstIP6 %s\n", prefix, printAddress(&sample->ipdst, buf, 50));
+    sf_log("%ssrcIP6 %s\n", prefix, printAddress(&sample->ipsrc, buf));
+    sf_log("%sdstIP6 %s\n", prefix, printAddress(&sample->ipdst, buf));
     sf_log("%sIPProtocol %u\n", prefix, sample->dcd_ipProtocol);
     sf_log("%spriority %u\n", prefix, ntohl(nfKey6.priority));
     sample->dcd_sport = ntohl(nfKey6.src_port);
@@ -2331,7 +2332,8 @@
     time_t now = time(NULL);
     char nowstr[200];
     strftime(nowstr, 200, "%d/%b/%Y:%H:%M:%S %z", localtime(&now));
-    snprintf(sfCLF.http_log, SFLFMT_CLF_MAX_LINE, "- %s [%s] \"%s %s HTTP/%u.%u\" %u %"PRIu64" \"%s\" \"%s\"",
+    /* should really be: snprintf(sfCLF.http_log, SFLFMT_CLF_MAX_LINE,...) but snprintf() is not always available */
+    sprintf(sfCLF.http_log, "- %s [%s] \"%s %s HTTP/%u.%u\" %u %"PRIu64" \"%s\" \"%s\"",
 	     authuser[0] ? authuser : "-",
 	     nowstr,
 	     SFHTTP_method_names[method],
@@ -2440,8 +2442,8 @@
   sample->ipsrc.address.ip_v4.addr = getData32_nobswap(sample);
   sample->ipdst.type = SFLADDRESSTYPE_IP_V4;
   sample->ipdst.address.ip_v4.addr = getData32_nobswap(sample);
-  sf_log("socket4_local_ip %s\n", printAddress(&sample->ipsrc, buf, 50));
-  sf_log("socket4_remote_ip %s\n", printAddress(&sample->ipdst, buf, 50));
+  sf_log("socket4_local_ip %s\n", printAddress(&sample->ipsrc, buf));
+  sf_log("socket4_remote_ip %s\n", printAddress(&sample->ipdst, buf));
   sf_log_next32(sample, "socket4_local_port");
   sf_log_next32(sample, "socket4_remote_port");
   
@@ -2467,8 +2469,8 @@
   ipsrc.address.ip_v4.addr = getData32_nobswap(sample);
   ipdst.type = SFLADDRESSTYPE_IP_V4;
   ipdst.address.ip_v4.addr = getData32_nobswap(sample);
-  sf_log("proxy_socket4_local_ip %s\n", printAddress(&ipsrc, buf, 50));
-  sf_log("proxy_socket4_remote_ip %s\n", printAddress(&ipdst, buf, 50));
+  sf_log("proxy_socket4_local_ip %s\n", printAddress(&ipsrc, buf));
+  sf_log("proxy_socket4_remote_ip %s\n", printAddress(&ipdst, buf));
   sf_log_next32(sample, "proxy_socket4_local_port");
   sf_log_next32(sample, "proxy_socket4_remote_port");
 }
@@ -2489,8 +2491,8 @@
   sample->ipdst.type = SFLADDRESSTYPE_IP_V6;
   memcpy(&sample->ipdst.address.ip_v6, sample->datap, 16);
   skipBytes(sample, 16);
-  sf_log("socket6_local_ip %s\n", printAddress(&sample->ipsrc, buf, 50));
-  sf_log("socket6_remote_ip %s\n", printAddress(&sample->ipdst, buf, 50));
+  sf_log("socket6_local_ip %s\n", printAddress(&sample->ipsrc, buf));
+  sf_log("socket6_remote_ip %s\n", printAddress(&sample->ipdst, buf));
   sf_log_next32(sample, "socket6_local_port");
   sf_log_next32(sample, "socket6_remote_port");
 
@@ -2517,8 +2519,8 @@
   ipdst.type = SFLADDRESSTYPE_IP_V6;
   memcpy(&ipdst.address.ip_v6, sample->datap, 16);
   skipBytes(sample, 16);
-  sf_log("proxy_socket6_local_ip %s\n", printAddress(&ipsrc, buf, 50));
-  sf_log("proxy_socket6_remote_ip %s\n", printAddress(&ipdst, buf, 50));
+  sf_log("proxy_socket6_local_ip %s\n", printAddress(&ipsrc, buf));
+  sf_log("proxy_socket6_remote_ip %s\n", printAddress(&ipdst, buf));
   sf_log_next32(sample, "proxy_socket6_local_port");
   sf_log_next32(sample, "proxy_socket6_remote_port");
 }
@@ -2715,7 +2717,7 @@
       u_char *start;
       char buf[51];
       tag = getData32(sample);
-      sf_log("flowBlock_tag %s\n", printTag(tag, buf, 50));
+      sf_log("flowBlock_tag %s\n", printTag(tag, buf));
       length = getData32(sample);
       start = (u_char *)sample->datap;
 
@@ -3567,7 +3569,7 @@
       u_char *start;
       char buf[51];
       tag = getData32(sample);
-      sf_log("counterBlock_tag %s\n", printTag(tag, buf, 50));
+      sf_log("counterBlock_tag %s\n", printTag(tag, buf));
       length = getData32(sample);
       start = (u_char *)sample->datap;
       
@@ -3627,7 +3629,7 @@
   /* log some datagram info */
   now.tv_sec = (long)time(NULL);
   now.tv_usec = 0;
-  sf_log("datagramSourceIP %s\n", printAddress(&sample->sourceIP, buf, 50));
+  sf_log("datagramSourceIP %s\n", printAddress(&sample->sourceIP, buf));
   sf_log("datagramSize %u\n", sample->rawSampleLen);
   sf_log("unixSecondsUTC %u\n", now.tv_sec);
   if(sample->pcapTimestamp) sf_log("pcapTimestamp %s\n", ctime(&sample->pcapTimestamp)); // thanks to Richard Clayton for this bugfix
@@ -3653,7 +3655,7 @@
   sample->sequenceNo = getData32(sample);  /* this is the packet sequence number */
   sample->sysUpTime = getData32(sample);
   samplesInPacket = getData32(sample);
-  sf_log("agent %s\n", printAddress(&sample->agent_addr, buf, 50));
+  sf_log("agent %s\n", printAddress(&sample->agent_addr, buf));
   sf_log("packetSequenceNo %u\n", sample->sequenceNo);
   sf_log("sysUpTime %u\n", sample->sysUpTime);
   sf_log("samplesInPacket %u\n", samplesInPacket);
@@ -3669,7 +3671,7 @@
       // just read the tag, then call the approriate decode fn
       sample->sampleType = getData32(sample);
       sf_log("startSample ----------------------\n");
-      sf_log("sampleType_tag %s\n", printTag(sample->sampleType, buf, 50));
+      sf_log("sampleType_tag %s\n", printTag(sample->sampleType, buf));
       if(sample->datagramVersion >= 5) {
 	switch(sample->sampleType) {
 	case SFLFLOW_SAMPLE: readFlowSample(sample, NO); break;
@@ -4202,6 +4204,7 @@
   int arg = 1, in = 0;
   int i;
   int plus,minus;
+  size_t len_str;
 
   /* set defaults */
   sfConfig.sFlowInputPort = 6343;
@@ -4249,7 +4252,16 @@
     case 't': sfConfig.outputFormat = SFLFMT_PCAP; break;
     case 'l': sfConfig.outputFormat = SFLFMT_LINE; break;
     case 'H': sfConfig.outputFormat = SFLFMT_CLF; break;
-    case 'r': sfConfig.readPcapFileName = strdup(argv[arg++]); break;
+    case 'r':
+        len_str = strlen(argv[arg]); /* argv[arg] already null-terminated */
+        sfConfig.readPcapFileName = malloc(len_str);
+        if(sfConfig.readPcapFileName)
+            memcpy(sfConfig.readPcapFileName, argv[arg++], len_str);
+        else {
+            fprintf(ERROUT, "unable to malloc\n");
+            exit(-1);
+        }
+        break;
     case 'x': sfConfig.removeContent = YES; break;
     case 'z': sfConfig.tcpdumpHdrPad = atoi(argv[arg++]); break;
     case 'c':
