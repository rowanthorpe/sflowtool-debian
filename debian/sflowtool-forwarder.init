#!/bin/sh
### BEGIN INIT INFO
# Provides:          sflowtool-forwarder
# Required-Start:    $local_fs $network $remote_fs $syslog
# Required-Stop:     $local_fs $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Daemon for forwarding sflow data to other destination(s)/port(s)
# Description:       This daemon forwards sflow data from one incoming port to
#                    another (or multiple) destination(s) and/or port(s).
### END INIT INFO

# Author: Rowan Thorpe <rowan@rowanthorpe.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH='/sbin:/usr/sbin:/bin:/usr/bin'
DESC='Daemon for forwarding sflow data to other destination(s)/port(s)'
NAME='sflowtool-forwarder'
DAEMON='/usr/bin/sflowtool'
PIDFILE="/var/run/${NAME}/${NAME}.pid"
SCRIPTNAME="/etc/init.d/$NAME"
# override the below settings in /etc/default/sflowtool-forwarder
DAEMON_ARGS='' # this must be set in defaults file or the daemon won't run
RUN_DAEMON='no'
USER='sflowtool'  # set to root for port below 1024
GROUP='sflowtool' # set to root for port below 1024
SILENT='no'

# Exit if the package is not installed
test -x "$DAEMON" || exit 0

# Read configuration variable file if it is present
if test -r "/etc/default/$NAME"; then
    . "/etc/default/$NAME" || { printf 'Failed to source /etc/default/%s\n' "$NAME"; exit 1; }
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions || { printf 'Failed to source /lib/lsb/init-functions\n'; exit 1; }

#
# Function that starts the daemon/service
#
do_start() {
    # start-stop-daemon --start retval:
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    # custom retval:
    #   254 problem with rundir
    test -d "/var/run/$NAME" && test -r "/var/run/$NAME" || {
        rmdir /var/run/$NAME >/dev/null 2>&1
        install -d -o"$USER" -g"$GROUP" -m755 "/var/run/$NAME" >/dev/null 2>&1 || return 254
    }
    start-stop-daemon --start --quiet --pidfile "$PIDFILE" --exec "$DAEMON" --test \
        --chuid "${USER}:${GROUP}" >/dev/null || return 1
    start-stop-daemon --start --quiet --pidfile "$PIDFILE" --exec "$DAEMON" \
        --chuid "${USER}:${GROUP}" --make-pidfile --background -- $DAEMON_ARGS
    #TODO:
    # Add code here, that waits for the process to be ready to handle requests from
    # services started subsequently which depend on this one, rather than just doing "sleep 1".
    sleep 1
    pidofproc -p "$PIDFILE" "$DAEMON" >/dev/null || return 2
}

#
# Function that stops the daemon/service
#
do_stop() {
    # start-stop-daemon --stop retval:
    #  0 if daemon has been stopped
    #  1 if daemon was already stopped
    #  2 if daemon could not be stopped
    #  * if another failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile "$PIDFILE" --exec "$DAEMON"
    RETVAL=$?
    test 2 -ne $RETVAL || return 2
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec "$DAEMON"
    test 2 -ne $? || return 2
    rm -f "$PIDFILE"
    return $RETVAL
}

#
# Function that stops then starts the daemon/service
#
do_restart() {
    # retval:
    #  0 if daemon restarted OK
    #  1 if daemon could not be stopped
    #  2 if daemon could not be started
    #  * if another failure occurred
    do_stop
    RETVAL=$?
    case $RETVAL in
        0|1) do_start;;
        2) return 1;;
        *) return $RETVAL;;
    esac
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    start-stop-daemon --stop --signal 1 --quiet --pidfile "$PIDFILE" --exec "$DAEMON"
}

case "$1" in
    start)
        if ! test 'yes' = "$RUN_DAEMON"; then
            test 'yes' = "$SILENT" || log_warning_msg "Not starting $NAME (Disabled in /etc/default/$NAME)"
        elif test -z "$DAEMON_ARGS"; then
            test 'yes' = "$SILENT" || log_warning_msg "Not starting $NAME (\$DAEMON_ARGS must be set in /etc/default/$NAME)"
        else
            test 'yes' = "$SILENT" || log_daemon_msg "Starting $DESC" "$NAME"
            do_start
            case $? in
                0|1) test 'yes' = "$SILENT" || log_end_msg 0;;
                2) test 'yes' = "$SILENT" || { log_progress_msg '(can not start process)'; log_end_msg 1; };;
                254) test 'yes' = "$SILENT" || { log_progress_msg '(problem with the rundir)'; log_end_msg 1; };;
                *) test 'yes' = "$SILENT" || { log_progress_msg '(unknown error)'; log_end_msg 1; };;
            esac
        fi
        ;;
    stop)
        test 'yes' = "$SILENT" || log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case $? in
            0|1) test 'yes' = "$SILENT" || log_end_msg 0;;
            2) test 'yes' = "$SILENT" || log_end_msg 1;;
            *) test 'yes' = "$SILENT" || { log_progress_msg '(unknown error)'; log_end_msg 1; };;
        esac
        ;;
    status)
        status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME"
        ;;
    #reload|force-reload)
    #    test 'yes' = "$SILENT" || log_daemon_msg "Reloading $DESC" "$NAME"
    #    do_reload
    #    test 'yes' = "$SILENT" || log_end_msg $?
    #    ;;
    #restart)
    restart|force-reload)
        test 'yes' = "$SILENT" || log_daemon_msg "Restarting $DESC" "$NAME"
        do_restart
        case $? in
            0) test 'yes' = "$SILENT" || log_end_msg 0;;
            1) test 'yes' = "$SILENT" || { log_progress_msg '(can not stop process)'; log_end_msg 1; };;
            2) test 'yes' = "$SILENT" || { log_progress_msg '(can not start process)'; log_end_msg 1; };;
            *) test 'yes' = "$SILENT" || { log_progress_msg '(unknown error)'; log_end_msg 1; };;
        esac
        ;;
    *)
        #log_failure_msg "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}"
        log_failure_msg "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}"
        exit 3
        ;;
esac

:
